// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notifierDefine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifierServiceClient is the client API for NotifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierServiceClient interface {
	RegisterPost(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Notifier(ctx context.Context, in *NotifierRequest, opts ...grpc.CallOption) (*NotifierResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (NotifierService_PushClient, error)
	GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type notifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierServiceClient(cc grpc.ClientConnInterface) NotifierServiceClient {
	return &notifierServiceClient{cc}
}

func (c *notifierServiceClient) RegisterPost(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/notifierDefine.NotifierService/RegisterPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/notifierDefine.NotifierService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) Notifier(ctx context.Context, in *NotifierRequest, opts ...grpc.CallOption) (*NotifierResponse, error) {
	out := new(NotifierResponse)
	err := c.cc.Invoke(ctx, "/notifierDefine.NotifierService/Notifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (NotifierService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifierService_ServiceDesc.Streams[0], "/notifierDefine.NotifierService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifierServicePushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifierService_PushClient interface {
	Recv() (*PushReply, error)
	grpc.ClientStream
}

type notifierServicePushClient struct {
	grpc.ClientStream
}

func (x *notifierServicePushClient) Recv() (*PushReply, error) {
	m := new(PushReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notifierServiceClient) GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/notifierDefine.NotifierService/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierServiceServer is the server API for NotifierService service.
// All implementations must embed UnimplementedNotifierServiceServer
// for forward compatibility
type NotifierServiceServer interface {
	RegisterPost(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Notifier(context.Context, *NotifierRequest) (*NotifierResponse, error)
	Push(*PushRequest, NotifierService_PushServer) error
	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	mustEmbedUnimplementedNotifierServiceServer()
}

// UnimplementedNotifierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifierServiceServer struct {
}

func (UnimplementedNotifierServiceServer) RegisterPost(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPost not implemented")
}
func (UnimplementedNotifierServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedNotifierServiceServer) Notifier(context.Context, *NotifierRequest) (*NotifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notifier not implemented")
}
func (UnimplementedNotifierServiceServer) Push(*PushRequest, NotifierService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedNotifierServiceServer) GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedNotifierServiceServer) mustEmbedUnimplementedNotifierServiceServer() {}

// UnsafeNotifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierServiceServer will
// result in compilation errors.
type UnsafeNotifierServiceServer interface {
	mustEmbedUnimplementedNotifierServiceServer()
}

func RegisterNotifierServiceServer(s grpc.ServiceRegistrar, srv NotifierServiceServer) {
	s.RegisterService(&NotifierService_ServiceDesc, srv)
}

func _NotifierService_RegisterPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).RegisterPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifierDefine.NotifierService/RegisterPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).RegisterPost(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifierDefine.NotifierService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_Notifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).Notifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifierDefine.NotifierService/Notifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).Notifier(ctx, req.(*NotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServiceServer).Push(m, &notifierServicePushServer{stream})
}

type NotifierService_PushServer interface {
	Send(*PushReply) error
	grpc.ServerStream
}

type notifierServicePushServer struct {
	grpc.ServerStream
}

func (x *notifierServicePushServer) Send(m *PushReply) error {
	return x.ServerStream.SendMsg(m)
}

func _NotifierService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifierDefine.NotifierService/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).GetHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierService_ServiceDesc is the grpc.ServiceDesc for NotifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifierDefine.NotifierService",
	HandlerType: (*NotifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPost",
			Handler:    _NotifierService_RegisterPost_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _NotifierService_Login_Handler,
		},
		{
			MethodName: "Notifier",
			Handler:    _NotifierService_Notifier_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _NotifierService_GetHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _NotifierService_Push_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notifierDefine/notifier.proto",
}
